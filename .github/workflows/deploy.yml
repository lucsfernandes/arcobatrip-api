name: CI/CD Deploy to VPS with K8s

on:
  push:
   branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USER }}/arcobatrip-api:${{ github.sha }}
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Criar/atualizar secret no cluster
        env:
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            TYPEORM_HOST: ${{ secrets.TYPEORM_HOST }}
            TYPEORM_PORT: ${{ secrets.TYPEORM_PORT }}
            TYPEORM_USERNAME: ${{ secrets.TYPEORM_USERNAME }}
            TYPEORM_PASSWORD: ${{ secrets.TYPEORM_PASSWORD }}
            TYPEORM_DATABASE: ${{ secrets.TYPEORM_DATABASE }}
            TYPEORM_SYNC: ${{ secrets.TYPEORM_SYNC }}
            TYPEORM_LOGGING: ${{ secrets.TYPEORM_LOGGING }}
            TYPEORM_SSLMODE: 'require'

        run: |
          kubectl create secret generic arcobatrip-secret -n arcobatrip \
            --from-literal=DATABASE_URL="${DATABASE_URL}" \
            --from-literal=JWT_SECRET="${JWT_SECRET}" \
            --from-literal=TYPEORM_HOST="${TYPEORM_HOST}" \
            --from-literal=TYPEORM_PORT="${TYPEORM_PORT}" \
            --from-literal=TYPEORM_USERNAME="${TYPEORM_USERNAME}" \
            --from-literal=TYPEORM_PASSWORD="${TYPEORM_PASSWORD}" \
            --from-literal=TYPEORM_DATABASE="${TYPEORM_DATABASE}" \
            --from-literal=TYPEORM_SYNC="${TYPEORM_SYNC}" \
            --from-literal=TYPEORM_LOGGING="${TYPEORM_LOGGING}" \
            --from-literal=TYPEORM_SSLMODE="${TYPEORM_SSLMODE}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Prepare kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" | base64 --decode > $HOME/.kube/config

      - name: Replace image placeholder
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USER }}/arcobatrip-api:${{ github.sha }}
          sed -i "s|REPLACE_IMAGE|${IMAGE_NAME}|g" k8s/backend-deployment.yaml

      - name: kubectl apply
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml || true

      # - name: Deploy via Portainer API
      #   run: |
      #     # Preparar payload do Stack
      #     STACK_CONTENT=$(cat portainer-stack.yml | base64 -w 0)
          
      #     # Fazer login no Portainer e obter JWT token
      #     JWT_TOKEN=$(curl -s -X POST "${{ secrets.PORTAINER_URL }}/api/auth" \
      #       -H "Content-Type: application/json" \
      #       -d '{"username":"${{ secrets.PORTAINER_USER }}","password":"${{ secrets.PORTAINER_PASS }}"}' | \
      #       jq -r '.jwt')
          
      #     # Verificar se o stack já existe
      #     STACK_ID=$(curl -s -X GET "${{ secrets.PORTAINER_URL }}/api/stacks" \
      #       -H "Authorization: Bearer $JWT_TOKEN" | \
      #       jq -r '.[] | select(.Name == "arcobatrip-api") | .Id')
          
      #     # Preparar variáveis de ambiente
      #     ENV_VARS='[
      #       {"name":"DOCKERHUB_USER","value":"${{ secrets.DOCKERHUB_USER }}"},
      #       {"name":"NODE_ENV","value":"production"},
      #       {"name":"PORT","value":"3000"},
      #       {"name":"TYPEORM_HOST","value":"${{ secrets.TYPEORM_HOST }}"},
      #       {"name":"TYPEORM_PORT","value":"${{ secrets.TYPEORM_PORT }}"},
      #       {"name":"TYPEORM_USERNAME","value":"${{ secrets.TYPEORM_USERNAME }}"},
      #       {"name":"TYPEORM_PASSWORD","value":"${{ secrets.TYPEORM_PASSWORD }}"},
      #       {"name":"TYPEORM_DATABASE","value":"${{ secrets.TYPEORM_DATABASE }}"},
      #       {"name":"TYPEORM_SYNC","value":"${{ secrets.TYPEORM_SYNC }}"},
      #       {"name":"TYPEORM_SSLMODE","value":"${{ secrets.TYPEORM_SSLMODE }}"}
      #     ]'
          
      #     if [ "$STACK_ID" != "null" ] && [ -n "$STACK_ID" ]; then
      #       # Atualizar stack existente
      #       echo "Atualizando stack existente (ID: $STACK_ID)"
      #       curl -X PUT "${{ secrets.PORTAINER_URL }}/api/stacks/$STACK_ID" \
      #         -H "Authorization: Bearer $JWT_TOKEN" \
      #         -H "Content-Type: application/json" \
      #         -d "{
      #           \"stackFileContent\": \"$(echo $STACK_CONTENT | base64 -d)\",
      #           \"env\": $ENV_VARS,
      #           \"prune\": true,
      #           \"pullImage\": true
      #         }"
      #     else
      #       # Criar novo stack
      #       echo "Criando novo stack"
      #       curl -X POST "${{ secrets.PORTAINER_URL }}/api/stacks" \
      #         -H "Authorization: Bearer $JWT_TOKEN" \
      #         -H "Content-Type: application/json" \
      #         -d "{
      #           \"name\": \"arcobatrip-api\",
      #           \"stackFileContent\": \"$(echo $STACK_CONTENT | base64 -d)\",
      #           \"env\": $ENV_VARS,
      #           \"endpointId\": ${{ secrets.PORTAINER_ENDPOINT_ID }}
      #         }"
      #     fi